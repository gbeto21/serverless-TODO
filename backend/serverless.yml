# TODO: Change the name of the org 
org: gbeto21
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
#   - serverless-iam-roles-per-function
#   - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  # stage: ${opt:stage, 'dev'}
  # region: ${opt:region, 'us-east-1'}

  # tracing:
  #   lambda: true
  #   apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  # environment:
  #   TODOS_TABLE: Todos-${self:provider.stage}
  #   TODOS_CREATED_AT_INDEX: CreatedAtIndex
  #   ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-${self:provider.stage}
  #   SIGNED_URL_EXPIRATION: 300

  # logs:
  #   # Enable API Gateway logs
  #   restApi: true

  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - xray:PutTelemetryRecords
  #           - xray:PutTraceSegments
  #         Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for add/update/delete/edit todos
    models:
      - name: CreateTodo
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodo
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}
  serverless-offline:
    httpPort: 4000
    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          # so we specified here that it should use the auth func. specified before
          # reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': CreateTodo
          request:
            schema:
              application/json: ${file(models/create-todo-model.json)}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Update a existing todo
            description: Update a existing todo
            requestModels:
              'application/json': UpdateTodo
          request:
            schema:
              application/json: ${file(models/update-todo-model.json)}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    RequestBodyValidator:
        Type: "AWS::ApiGateway::RequestValidator"
        # we need a name and an id of the api which we will use
        Properties:
          Name: 'request-body-validator'
          RestApiId:
            Ref: ApiGatewayRestApi
          # it only validate body requests and not request parameters
          ValidateRequestBody: true
          ValidateRequestParameters: false
#     # Add necessary AWS resources. You will need at least the following AWS resources
#     # TODO: Fill the properties
#     # Feel free to change the names as you like. 
#     GatewayResponseDefault4XX:
#       Type: AWS::ApiGateway::GatewayResponse
#       Properties:
    
#     # TODO: Create a DynamoDB table with local secondary index and a composite key
#     TodosTable:
#       Type: AWS::DynamoDB::Table
#       Properties:

#     # TODO: Complete the bucket properties below. 
#     # Do not forget to add the CorsConfiguration propoerty
#     AttachmentsBucket:
#       Type: AWS::S3::Bucket
#       Properties:

#     # TODO: Complete the policy below and attach it to the bucket defined above
#     # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
#     BucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties: