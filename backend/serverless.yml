# TODO: Change the name of the org 
org: gbeto21
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-offline
#   - serverless-iam-roles-per-function
#   - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # tracing:
  #   lambda: true
  #   apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: todo-images-${self:provider.stage}-21
    SIGNED_URL_EXPIRATION: 650

  # logs:
  #   # Enable API Gateway logs
  #   restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for add/update/delete/edit todos
    models:
      - name: CreateTodo
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodo
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}
  serverless-offline:
    httpPort: 4000
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
    # migration:
    #   dir: offline/migrations
    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          # so we specified here that it should use the auth func. specified before
          # reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': CreateTodo
          request:
            schema:
              application/json: ${file(models/create-todo-model.json)}
    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Update a existing todo
            description: Update a existing todo
            requestModels:
              'application/json': UpdateTodo
          request:
            schema:
              application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      # add permissions to be able to put and get objects for our s3 bucket
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::bucketName/*
        # Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::bucketName/*
        # Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

resources:
  Resources:

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # single id field of type string which is the partition key
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        # so, we set the simple primary key as hash key
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: bucketName
        # BucketName: ${self:provider.environment.TODOS_IMAGES_S3_BUCKET}
        # important so S3 can send the correct CORS HEADERS
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              # allows for anybody '*' to get objects of our s3 bucket
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::bucketName/*'
              # Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*'
        # specify which bucket this bucketPolicy should be applied
        Bucket: !Ref AttachmentsBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
        Type: "AWS::ApiGateway::RequestValidator"
        # we need a name and an id of the api which we will use
        Properties:
          Name: 'request-body-validator'
          RestApiId:
            Ref: ApiGatewayRestApi
          # it only validate body requests and not request parameters
          ValidateRequestBody: true
          ValidateRequestParameters: false

# player-score.json:
# {
#     "Table": {
#         "TableName": "table-name",
#         "KeySchema": [
#             {
#                 "AttributeName": "ID",
#                 "KeyType": "HASH"
#             }
#         ],
#         "AttribureDefinitions": [
#             {
#                 "AttributeName": "ID",
#                 "AttributeType": "S"
#             }
#         ],
#         "provisionedThoughtput":{
#             "ReadCapacityUnits": 1,
#             "WriteCapacityUnits": 1
#         }
#     }
# }